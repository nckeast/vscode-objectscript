name: CI

on: [push,release]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
    - uses: actions/checkout@master
    - name: Start xvfb
      if: runner.os == 'Linux'
      run: |
        set -e
        /usr/bin/Xvfb :10 -ac >> /tmp/Xvfb.out 2>&1 &
        disown -ar
    - name: Use Node.js
      uses: actions/setup-node@master
      with:
        node-version: 10
    - run: npm install
    - run: npm run compile
    - run: npm run test
      env:
        DISPLAY: :10
    - name: Set an output
      id: get-version
      if: runner.os == 'Linux'
      run: |
        echo ::set-output name=version::$(jq -r '.version' package.json | cut -d- -f1)-B$(date -u "+%Y%m%d")
        echo ::set-output name=name::$(jq -r '.name+"-"+.version' package.json | cut -d- -f1-3)-B$(date -u "+%Y%m%d")
    - name: Build package
      if: runner.os == 'Linux'
      run: |
        mkdir dist
        ./node_modules/.bin/vsce package -o ./dist/${{ steps.get-version.outputs.name }}.vsix
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      if: runner.os == 'Linux'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get-version.outputs.version }}
        release_name: v${{ steps.get-version.outputs.version }}
        draft: false
        prerelease: true
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      if: runner.os == 'Linux'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/${{ steps.get-version.outputs.name }}.vsix
        asset_name: ${{ steps.get-version.outputs.name }}.vsix
        asset_content_type: application/zip